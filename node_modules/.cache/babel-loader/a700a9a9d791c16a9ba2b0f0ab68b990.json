{"ast":null,"code":"var _jsxFileName = \"/Users/jermanybrown/Project_Flashcards_Qualified_1/src/Study/StudyScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useParams } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index\";\nimport StudyNav from \"./StudyNav\";\nimport AddingCard from \"../DeckScreen/AddingCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StudyScreen = () => {\n  _s();\n\n  const [deck, setDeck] = useState({});\n  const [cardIndex, setCardIndex] = useState(0);\n  const [frontSide, setFrontSide] = useState(true);\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck);\n    return () => abortController.abort();\n  }, [deckId]);\n  if (Object.keys(deck).length === 0) return null;\n\n  if (!deck.cards) {\n    return null;\n  }\n\n  const NotEnoughMessage = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(StudyNav, {\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Not enough cards.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"You need at least 3 cards to study. There are \", deck.cards.length, \" in this deck.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddingCard, {\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n\n  const handleFlip = event => {\n    setFrontSide(!frontSide);\n  };\n\n  const handleNext = event => {\n    if (cardIndex < deck.cards.length - 1) {\n      setCardIndex(cardIndex + 1);\n    } else {\n      if (window.confirm(`Restart cards?\\n\\nClick 'cancel' to return to the home page.`)) {\n        setCardIndex(0);\n      } else {\n        history.push(\"/\");\n      }\n    }\n\n    setFrontSide(true);\n  };\n\n  const renderNextBtn = () => {\n    if (frontSide === false) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        id: \"next\",\n        className: \"btn btn-primary\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  };\n\n  if (deck.cards.length < 3) {\n    return NotEnoughMessage;\n  } else if (deck.cards.length >= 3) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StudyNav, {\n        deck: deck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card mb-1\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex w-100\",\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: [\"Card \", cardIndex + 1, \" of \", deck.cards.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), frontSide === true ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: deck.cards[cardIndex].front\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: deck.cards[cardIndex].back\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-toolbar \",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"btn-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleFlip,\n                id: \"flip\",\n                className: \"btn btn-secondary\",\n                children: \"Flip\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 17\n              }, this), renderNextBtn()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(StudyScreen, \"rT014hnSZsFI+lwBnxFiYLR3fu4=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = StudyScreen;\nexport default StudyScreen; // The Study screen has the following features:\n// The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n// There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n// The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n// Cards are shown one at a time, front-side first.\n// A button at the bottom of each card \"flips\" it to the other side.\n// After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n// After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n// If the user does not restart the deck, they should return to the home screen.\n// Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck.\n// Next button\n// The next button appears after the card is flipped.\n// Restart prompt\n// When all cards are finished, a message is shown and the user is offered the opportunity to restart the deck. If the user does not restart the deck, they return to the home screen.\n// You can use window.confirm() to create the modal dialog shown in the screenshot below.\n// Not enough cards\n// Studying a Deck with two or fewer cards should display a \"Not enough cards\" message and a button to add cards to the deck.\n\nvar _c;\n\n$RefreshReg$(_c, \"StudyScreen\");","map":{"version":3,"sources":["/Users/jermanybrown/Project_Flashcards_Qualified_1/src/Study/StudyScreen.js"],"names":["React","useEffect","useState","useHistory","useParams","readDeck","StudyNav","AddingCard","StudyScreen","deck","setDeck","cardIndex","setCardIndex","frontSide","setFrontSide","deckId","history","abortController","AbortController","signal","then","abort","Object","keys","length","cards","NotEnoughMessage","handleFlip","event","handleNext","window","confirm","push","renderNextBtn","front","back"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAaX,SAAS,EAA5B;AACA,QAAMY,OAAO,GAAGb,UAAU,EAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAb,IAAAA,QAAQ,CAACU,MAAD,EAASE,eAAe,CAACE,MAAzB,CAAR,CAAyCC,IAAzC,CAA8CV,OAA9C;AACA,WAAO,MAAMO,eAAe,CAACI,KAAhB,EAAb;AACD,GAJQ,EAIN,CAACN,MAAD,CAJM,CAAT;AAKA,MAAIO,MAAM,CAACC,IAAP,CAAYd,IAAZ,EAAkBe,MAAlB,KAA6B,CAAjC,EAAoC,OAAO,IAAP;;AACpC,MAAI,CAACf,IAAI,CAACgB,KAAV,EAAiB;AACf,WAAO,IAAP;AACD;;AACD,QAAMC,gBAAgB,gBACpB;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEjB;AAAhB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,mEACiDA,IAAI,CAACgB,KAAL,CAAWD,MAD5D;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAOE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEf;AAAlB;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;;AAWA,QAAMkB,UAAU,GAAIC,KAAD,IAAW;AAC5Bd,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAFD;;AAGA,QAAMgB,UAAU,GAAID,KAAD,IAAW;AAC5B,QAAIjB,SAAS,GAAGF,IAAI,CAACgB,KAAL,CAAWD,MAAX,GAAoB,CAApC,EAAuC;AACrCZ,MAAAA,YAAY,CAACD,SAAS,GAAG,CAAb,CAAZ;AACD,KAFD,MAEO;AACL,UACEmB,MAAM,CAACC,OAAP,CACG,8DADH,CADF,EAIE;AACAnB,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,OAND,MAMO;AACLI,QAAAA,OAAO,CAACgB,IAAR,CAAa,GAAb;AACD;AACF;;AACDlB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAfD;;AAgBA,QAAMmB,aAAa,GAAG,MAAM;AAC1B,QAAIpB,SAAS,KAAK,KAAlB,EAAyB;AACvB,0BACE;AAAQ,QAAA,OAAO,EAAEgB,UAAjB;AAA6B,QAAA,EAAE,EAAC,MAAhC;AAAuC,QAAA,SAAS,EAAC,iBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KAND,MAMO;AACL,aAAO,IAAP;AACD;AACF,GAVD;;AAWA,MAAIpB,IAAI,CAACgB,KAAL,CAAWD,MAAX,GAAoB,CAAxB,EAA2B;AACzB,WAAOE,gBAAP;AACD,GAFD,MAEO,IAAIjB,IAAI,CAACgB,KAAL,CAAWD,MAAX,IAAqB,CAAzB,EAA4B;AACjC,wBACE;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEf;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,mCACE;AAAI,cAAA,SAAS,EAAC,YAAd;AAAA,kCACQE,SAAS,GAAG,CADpB,UAC2BF,IAAI,CAACgB,KAAL,CAAWD,MADtC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,EAMGX,SAAS,KAAK,IAAd,gBACC;AAAG,YAAA,SAAS,EAAC,WAAb;AAAA,sBAA0BJ,IAAI,CAACgB,KAAL,CAAWd,SAAX,EAAsBuB;AAAhD;AAAA;AAAA;AAAA;AAAA,kBADD,gBAGC;AAAG,YAAA,SAAS,EAAC,WAAb;AAAA,sBAA0BzB,IAAI,CAACgB,KAAL,CAAWd,SAAX,EAAsBwB;AAAhD;AAAA;AAAA;AAAA;AAAA,kBATJ,eAWE;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,mCACE;AAAK,cAAA,SAAS,EAAC,WAAf;AAAA,sCACE;AACE,gBAAA,OAAO,EAAER,UADX;AAEE,gBAAA,EAAE,EAAC,MAFL;AAGE,gBAAA,SAAS,EAAC,mBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAQGM,aAAa,EARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA+BD;AACF,CA5FD;;GAAMzB,W;UAIeJ,S,EACHD,U;;;KALZK,W;AA8FN,eAAeA,WAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAIA;AAEA","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useParams } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index\";\nimport StudyNav from \"./StudyNav\";\nimport AddingCard from \"../DeckScreen/AddingCard\";\n\nconst StudyScreen = () => {\n  const [deck, setDeck] = useState({});\n  const [cardIndex, setCardIndex] = useState(0);\n  const [frontSide, setFrontSide] = useState(true);\n  const { deckId } = useParams();\n  const history = useHistory();\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck);\n    return () => abortController.abort();\n  }, [deckId]);\n  if (Object.keys(deck).length === 0) return null;\n  if (!deck.cards) {\n    return null;\n  }\n  const NotEnoughMessage = (\n    <div>\n      <StudyNav deck={deck} />\n      <h3>Not enough cards.</h3>\n      <p>\n        You need at least 3 cards to study. There are {deck.cards.length} in\n        this deck.\n      </p>\n      <AddingCard deck={deck} />\n    </div>\n  );\n  const handleFlip = (event) => {\n    setFrontSide(!frontSide);\n  };\n  const handleNext = (event) => {\n    if (cardIndex < deck.cards.length - 1) {\n      setCardIndex(cardIndex + 1);\n    } else {\n      if (\n        window.confirm(\n          `Restart cards?\\n\\nClick 'cancel' to return to the home page.`\n        )\n      ) {\n        setCardIndex(0);\n      } else {\n        history.push(\"/\");\n      }\n    }\n    setFrontSide(true);\n  };\n  const renderNextBtn = () => {\n    if (frontSide === false) {\n      return (\n        <button onClick={handleNext} id=\"next\" className=\"btn btn-primary\">\n          Next\n        </button>\n      );\n    } else {\n      return null;\n    }\n  };\n  if (deck.cards.length < 3) {\n    return NotEnoughMessage;\n  } else if (deck.cards.length >= 3) {\n    return (\n      <div>\n        <StudyNav deck={deck} />\n        <div className=\"card mb-1\">\n          <div className=\"card-body\">\n            <div className=\"d-flex w-100\">\n              <h5 className=\"card-title\">\n                Card {cardIndex + 1} of {deck.cards.length}\n              </h5>\n            </div>\n            {frontSide === true ? (\n              <p className=\"card-text\">{deck.cards[cardIndex].front}</p>\n            ) : (\n              <p className=\"card-text\">{deck.cards[cardIndex].back}</p>\n            )}\n            <div className=\"btn-toolbar \">\n              <div className=\"btn-group\">\n                <button\n                  onClick={handleFlip}\n                  id=\"flip\"\n                  className=\"btn btn-secondary\"\n                >\n                  Flip\n                </button>\n                {renderNextBtn()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default StudyScreen;\n\n// The Study screen has the following features:\n\n// The path to this screen should include the deckId (i.e., /decks/:deckId/study).\n// There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied and finally the text Study (e.g., Home/Rendering In React/Study).\n// The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.\n// Cards are shown one at a time, front-side first.\n// A button at the bottom of each card \"flips\" it to the other side.\n// After flipping the card, the screen shows a next button (see the \"Next button\" section below) to continue to the next card.\n// After the final card in the deck has been shown, a message (see the \"Restart prompt\" section below) is shown offering the user the opportunity to restart the deck.\n// If the user does not restart the deck, they should return to the home screen.\n// Studying a deck with two or fewer cards should display a \"Not enough cards\" message (see the \"Not enough cards\" section below) and a button to add cards to the deck.\n// Next button\n\n// The next button appears after the card is flipped.\n\n// Restart prompt\n\n// When all cards are finished, a message is shown and the user is offered the opportunity to restart the deck. If the user does not restart the deck, they return to the home screen.\n\n// You can use window.confirm() to create the modal dialog shown in the screenshot below.\n\n\n\n// Not enough cards\n\n// Studying a Deck with two or fewer cards should display a \"Not enough cards\" message and a button to add cards to the deck."]},"metadata":{},"sourceType":"module"}